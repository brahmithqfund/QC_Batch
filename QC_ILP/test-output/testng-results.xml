<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="36" total="52" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="12773203" started-at="2019-04-15T07:51:44Z" finished-at="2019-04-15T11:24:37Z">
    <groups>
      <group name="Brahmith">
        <method signature="QCStore.QC_AgeStore_Void_Txn()[pri:54, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_Buyback_Txn()[pri:16, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Buyback_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_Buyback_Void_Txn()[pri:17, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Buyback_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_Deposit_Return_Txn()[pri:35, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Deposit_Return_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_NewLoanInstallmentDeposit_Txn()[pri:55, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_NewLoanInstallmentDeposit_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_Return_Menu_Txn()[pri:31, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Return_Menu_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_ILP_clear_Menu_Txn()[pri:32, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_clear_Menu_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_InstallPayment_Ref_Rescind_Txn()[pri:47, instance:tests.QCStore@5f9d02cb]" name="QC_InstallPayment_Ref_Rescind_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Installmentpayment_Txn()[pri:21, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Installmentpayment_Void_Txn()[pri:22, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_LessInterest_VoidFullPayment_Txn()[pri:51, instance:tests.QCStore@5f9d02cb]" name="QC_LessInterest_VoidFullPayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Promotion_Txn()[pri:4, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_TLPConversion_Txn()[pri:53, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_TLPConversion_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Void_Txn()[pri:7, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_PayAnyotherAmount_Txn()[pri:23, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_PayAnyotherAmount_Void_Txn()[pri:24, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Void_Txn" class="tests.QCStore"/>
      </group> <!-- Brahmith -->
    </groups>
    <test name="Test" duration-ms="12773203" started-at="2019-04-15T07:51:44Z" finished-at="2019-04-15T11:24:37Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="122" started-at="2019-04-15T07:51:44Z" finished-at="2019-04-15T07:51:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-04-15T07:51:44Z" finished-at="2019-04-15T07:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_Promotion_Txn()[pri:4, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" duration-ms="234227" started-at="2019-04-15T07:51:49Z" finished-at="2019-04-15T07:55:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Promotion_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T07:55:43Z" finished-at="2019-04-15T07:55:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="407" started-at="2019-04-15T07:55:43Z" finished-at="2019-04-15T07:55:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_Promotion_Txn status=SUCCESS method=QCStore.QC_NewLoan_Promotion_Txn()[pri:4, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T07:55:44Z" finished-at="2019-04-15T07:55:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_Void_Txn()[pri:7, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" duration-ms="183308" started-at="2019-04-15T07:55:49Z" finished-at="2019-04-15T07:58:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Void_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T07:58:52Z" finished-at="2019-04-15T07:58:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="50" started-at="2019-04-15T07:58:52Z" finished-at="2019-04-15T07:58:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_Void_Txn status=SUCCESS method=QCStore.QC_NewLoan_Void_Txn()[pri:7, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T07:58:52Z" finished-at="2019-04-15T07:58:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_ILP_Buyback_Txn()[pri:16, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Buyback_Txn" duration-ms="485090" started-at="2019-04-15T07:58:57Z" finished-at="2019-04-15T08:07:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_Buyback_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="66" started-at="2019-04-15T08:07:02Z" finished-at="2019-04-15T08:07:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_Buyback_Txn status=SUCCESS method=QCStore.QC_ILP_Buyback_Txn()[pri:16, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T08:07:02Z" finished-at="2019-04-15T08:07:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T08:07:02Z" finished-at="2019-04-15T08:07:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_ILP_Buyback_Void_Txn()[pri:17, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Buyback_Void_Txn" duration-ms="514170" started-at="2019-04-15T08:07:07Z" finished-at="2019-04-15T08:15:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_Buyback_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="35" started-at="2019-04-15T08:15:41Z" finished-at="2019-04-15T08:15:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_Buyback_Void_Txn status=SUCCESS method=QCStore.QC_ILP_Buyback_Void_Txn()[pri:17, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T08:15:41Z" finished-at="2019-04-15T08:15:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T08:15:41Z" finished-at="2019-04-15T08:15:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Installmentpayment_Txn()[pri:21, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Txn" duration-ms="455100" started-at="2019-04-15T08:15:46Z" finished-at="2019-04-15T08:23:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Installmentpayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="44" started-at="2019-04-15T08:23:22Z" finished-at="2019-04-15T08:23:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Installmentpayment_Txn status=SUCCESS method=QCStore.QC_Installmentpayment_Txn()[pri:21, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T08:23:22Z" finished-at="2019-04-15T08:23:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T08:23:22Z" finished-at="2019-04-15T08:23:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Installmentpayment_Void_Txn()[pri:22, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Void_Txn" duration-ms="576109" started-at="2019-04-15T08:23:27Z" finished-at="2019-04-15T08:33:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Installmentpayment_Void_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T08:33:03Z" finished-at="2019-04-15T08:33:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="53" started-at="2019-04-15T08:33:03Z" finished-at="2019-04-15T08:33:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Installmentpayment_Void_Txn status=SUCCESS method=QCStore.QC_Installmentpayment_Void_Txn()[pri:22, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-04-15T08:33:03Z" finished-at="2019-04-15T08:33:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_PayAnyotherAmount_Txn()[pri:23, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Txn" duration-ms="450352" started-at="2019-04-15T08:33:08Z" finished-at="2019-04-15T08:40:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_PayAnyotherAmount_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="1" started-at="2019-04-15T08:40:38Z" finished-at="2019-04-15T08:40:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="47" started-at="2019-04-15T08:40:38Z" finished-at="2019-04-15T08:40:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_PayAnyotherAmount_Txn status=SUCCESS method=QCStore.QC_PayAnyotherAmount_Txn()[pri:23, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T08:40:38Z" finished-at="2019-04-15T08:40:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_PayAnyotherAmount_Void_Txn()[pri:24, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Void_Txn" duration-ms="576765" started-at="2019-04-15T08:40:43Z" finished-at="2019-04-15T08:50:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_PayAnyotherAmount_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="38" started-at="2019-04-15T08:50:20Z" finished-at="2019-04-15T08:50:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_PayAnyotherAmount_Void_Txn status=SUCCESS method=QCStore.QC_PayAnyotherAmount_Void_Txn()[pri:24, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T08:50:20Z" finished-at="2019-04-15T08:50:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5002" started-at="2019-04-15T08:50:20Z" finished-at="2019-04-15T08:50:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_ILP_Return_Menu_Txn()[pri:31, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Return_Menu_Txn" duration-ms="778158" started-at="2019-04-15T08:50:25Z" finished-at="2019-04-15T09:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_Return_Menu_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="1" started-at="2019-04-15T09:03:23Z" finished-at="2019-04-15T09:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="46" started-at="2019-04-15T09:03:23Z" finished-at="2019-04-15T09:03:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_Return_Menu_Txn status=SUCCESS method=QCStore.QC_ILP_Return_Menu_Txn()[pri:31, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-04-15T09:03:23Z" finished-at="2019-04-15T09:03:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_ILP_clear_Menu_Txn()[pri:32, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_clear_Menu_Txn" duration-ms="685036" started-at="2019-04-15T09:03:28Z" finished-at="2019-04-15T09:14:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_clear_Menu_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="40" started-at="2019-04-15T09:14:53Z" finished-at="2019-04-15T09:14:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_clear_Menu_Txn status=SUCCESS method=QCStore.QC_ILP_clear_Menu_Txn()[pri:32, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T09:14:53Z" finished-at="2019-04-15T09:14:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T09:14:53Z" finished-at="2019-04-15T09:14:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_ILP_Deposit_Return_Txn()[pri:35, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_Deposit_Return_Txn" duration-ms="554901" started-at="2019-04-15T09:14:58Z" finished-at="2019-04-15T09:24:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_Deposit_Return_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="41" started-at="2019-04-15T09:24:13Z" finished-at="2019-04-15T09:24:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_Deposit_Return_Txn status=SUCCESS method=QCStore.QC_ILP_Deposit_Return_Txn()[pri:35, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T09:24:13Z" finished-at="2019-04-15T09:24:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T09:24:13Z" finished-at="2019-04-15T09:24:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_InstallPayment_Ref_Rescind_Txn()[pri:47, instance:tests.QCStore@5f9d02cb]" name="QC_InstallPayment_Ref_Rescind_Txn" duration-ms="659198" started-at="2019-04-15T09:24:18Z" finished-at="2019-04-15T09:35:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_InstallPayment_Ref_Rescind_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T09:35:17Z" finished-at="2019-04-15T09:35:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="40" started-at="2019-04-15T09:35:17Z" finished-at="2019-04-15T09:35:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_InstallPayment_Ref_Rescind_Txn status=SUCCESS method=QCStore.QC_InstallPayment_Ref_Rescind_Txn()[pri:47, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-04-15T09:35:17Z" finished-at="2019-04-15T09:35:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_LessInterest_VoidFullPayment_Txn()[pri:51, instance:tests.QCStore@5f9d02cb]" name="QC_LessInterest_VoidFullPayment_Txn" duration-ms="802054" started-at="2019-04-15T09:35:22Z" finished-at="2019-04-15T09:48:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_LessInterest_VoidFullPayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="51" started-at="2019-04-15T09:48:44Z" finished-at="2019-04-15T09:48:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_LessInterest_VoidFullPayment_Txn status=SUCCESS method=QCStore.QC_LessInterest_VoidFullPayment_Txn()[pri:51, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T09:48:44Z" finished-at="2019-04-15T09:48:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T09:48:45Z" finished-at="2019-04-15T09:48:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_TLPConversion_Txn()[pri:53, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_TLPConversion_Txn" duration-ms="612692" started-at="2019-04-15T09:48:50Z" finished-at="2019-04-15T09:59:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_TLPConversion_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T09:59:02Z" finished-at="2019-04-15T09:59:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="47" started-at="2019-04-15T09:59:02Z" finished-at="2019-04-15T09:59:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_TLPConversion_Txn status=SUCCESS method=QCStore.QC_NewLoan_TLPConversion_Txn()[pri:53, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5002" started-at="2019-04-15T09:59:02Z" finished-at="2019-04-15T09:59:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_AgeStore_Void_Txn()[pri:54, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" duration-ms="490511" started-at="2019-04-15T09:59:07Z" finished-at="2019-04-15T10:07:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_AgeStore_Void_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-04-15T10:07:18Z" finished-at="2019-04-15T10:07:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="63" started-at="2019-04-15T10:07:18Z" finished-at="2019-04-15T10:07:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_AgeStore_Void_Txn status=SUCCESS method=QCStore.QC_AgeStore_Void_Txn()[pri:54, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-04-15T10:07:18Z" finished-at="2019-04-15T10:07:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_ILP_NewLoanInstallmentDeposit_Txn()[pri:55, instance:tests.QCStore@5f9d02cb]" name="QC_ILP_NewLoanInstallmentDeposit_Txn" duration-ms="4633530" started-at="2019-04-15T10:07:23Z" finished-at="2019-04-15T11:24:36Z">
          <exception class="junit.framework.AssertionFailedError">
            <full-stacktrace>
              <![CDATA[junit.framework.AssertionFailedError
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue(Assert.java:20)
at junit.framework.Assert.assertTrue(Assert.java:27)
at tests.QCDepositDropdown.depositDropDown(QCDepositDropdown.java:185)
at tests.QCStore.QC_ILP_NewLoanInstallmentDeposit_Txn(QCStore.java:854)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.AssertionFailedError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_ILP_NewLoanInstallmentDeposit_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="1" started-at="2019-04-15T11:24:36Z" finished-at="2019-04-15T11:24:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="765" started-at="2019-04-15T11:24:36Z" finished-at="2019-04-15T11:24:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_ILP_NewLoanInstallmentDeposit_Txn status=FAILURE method=QCStore.QC_ILP_NewLoanInstallmentDeposit_Txn()[pri:55, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- tests.QCStore -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
