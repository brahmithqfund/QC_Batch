<?xml version="1.0" encoding="UTF-8"?>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<testng-results skipped="0" failed="0" ignored="75" total="77" passed="2">
=======
<testng-results skipped="0" failed="1" ignored="76" total="77" passed="0">
>>>>>>> anoop1.1
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="15060" started-at="2019-04-02T06:55:45Z" finished-at="2019-04-02T06:56:00Z">
    <groups>
      <group name="Anoopre">
        <method signature="QCStore.RefinanceStepup()[pri:9, instance:tests.QCStore@5f9d02cb]" name="RefinanceStepup" class="tests.QCStore"/>
      </group> <!-- Anoopre -->
    </groups>
    <test name="Test" duration-ms="15060" started-at="2019-04-02T06:55:45Z" finished-at="2019-04-02T06:56:00Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="102" started-at="2019-04-02T06:55:45Z" finished-at="2019-04-02T06:55:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-04-02T06:55:45Z" finished-at="2019-04-02T06:55:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="RefinanceStepup()[pri:9, instance:tests.QCStore@5f9d02cb]" name="RefinanceStepup" duration-ms="8434" started-at="2019-04-02T06:55:50Z" finished-at="2019-04-02T06:55:58Z">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[Element is no longer valid (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QTLSYS2-48', ip: '192.168.2.48', os.name: 'Windows 7', os.arch: 'amd64', os.version: '6.1', java.version: '1.8.0_171'
Driver info: org.openqa.selenium.ie.InternetExplorerDriver
Capabilities {browserAttachTimeout: 0, browserName: internet explorer, cssSelectorsEnabled: true, elementScrollBehavior: 0, enableElementCacheCleanup: true, enablePersistentHover: true, handlesAlerts: true, ie.browserCommandLineSwitches: , ie.ensureCleanSession: false, ie.forceCreateProcessApi: false, ie.usePerProcessProxy: false, ignoreProtectedModeSettings: false, ignoreZoomSetting: false, initialBrowserUrl: http://localhost:15875/, javascriptEnabled: true, nativeEvents: true, platform: WINDOWS, platformName: WINDOWS, requireWindowFocus: false, takesScreenshot: true, unexpectedAlertBehaviour: dismiss, unhandledPromptBehavior: dismiss, version: 11}
Session ID: 843ed441-09c4-459f-be01-cf26c19f1035]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: Element is no longer valid (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'QTLSYS2-48', ip: '192.168.2.48', os.name: 'Windows 7', os.arch: 'amd64', os.version: '6.1', java.version: '1.8.0_171'
Driver info: org.openqa.selenium.ie.InternetExplorerDriver
Capabilities {browserAttachTimeout: 0, browserName: internet explorer, cssSelectorsEnabled: true, elementScrollBehavior: 0, enableElementCacheCleanup: true, enablePersistentHover: true, handlesAlerts: true, ie.browserCommandLineSwitches: , ie.ensureCleanSession: false, ie.forceCreateProcessApi: false, ie.usePerProcessProxy: false, ignoreProtectedModeSettings: false, ignoreZoomSetting: false, initialBrowserUrl: http://localhost:15875/, javascriptEnabled: true, nativeEvents: true, platform: WINDOWS, platformName: WINDOWS, requireWindowFocus: false, takesScreenshot: true, unexpectedAlertBehaviour: dismiss, unhandledPromptBehavior: dismiss, version: 11}
Session ID: 843ed441-09c4-459f-be01-cf26c19f1035
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:276)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:83)
at tests.ACSRBorrowerRegistration.borrowerReg(ACSRBorrowerRegistration.java:117)
at tests.QCStore.RefinanceStepup(QCStore.java:2491)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RefinanceStepup -->
<<<<<<< HEAD
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="206" started-at="2019-04-02T05:27:43Z" finished-at="2019-04-02T05:27:44Z">
=======
<testng-results skipped="0" failed="3" ignored="55" total="77" passed="19">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="22403847" started-at="2019-04-01T12:56:16Z" finished-at="2019-04-01T19:09:40Z">
    <groups>
      <group name="1stBatch">
        <method signature="QCStore.QC_AgeStore_Void_Txn()[pri:110, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Deposit_GraceDays_Txn()[pri:112, instance:tests.QCStore@5f9d02cb]" name="QC_Deposit_GraceDays_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Deposit_Menu_Txn()[pri:111, instance:tests.QCStore@5f9d02cb]" name="QC_Deposit_Menu_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_EppDepositClear_Refund_Txn()[pri:160, instance:tests.QCStore@5f9d02cb]" name="QC_EppDepositClear_Refund_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_Check_Deposit_Clear_Txn()[pri:159, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Check_Deposit_Clear_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_Deposit_Void_Txn()[pri:157, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Deposit_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_PrePayment_Return_Txn()[pri:161, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_PrePayment_Return_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_PrePayment_Txn()[pri:158, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_PrePayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_Return_NSFPayment_Txn()[pri:162, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Return_NSFPayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Epp_Return_ReDeposit_Txn()[pri:163, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Return_ReDeposit_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_FutureDeposit_DropDown()[pri:113, instance:tests.QCStore@5f9d02cb]" name="QC_FutureDeposit_DropDown" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Promotion_Txn()[pri:100, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Void_Txn()[pri:109, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_OpenLoan_NewLoan_Txn()[pri:108, instance:tests.QCStore@5f9d02cb]" name="QC_OpenLoan_NewLoan_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_PartialPayment_RefundVoid_Txn()[pri:170, instance:tests.QCStore@5f9d02cb]" name="QC_PartialPayment_RefundVoid_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_RefinanceStepDown_Txn()[pri:102, instance:tests.QCStore@5f9d02cb]" name="QC_RefinanceStepDown_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_RefinanceStepDown_Void_Txn()[pri:103, instance:tests.QCStore@5f9d02cb]" name="QC_RefinanceStepDown_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Refinance_StepSameURP_Txn()[pri:198, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepSameURP_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Refinance_StepSameVoidURP_Txn()[pri:199, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepSameVoidURP_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Void_FullReturnPayment_Txn()[pri:169, instance:tests.QCStore@5f9d02cb]" name="QC_Void_FullReturnPayment_Txn" class="tests.QCStore"/>
      </group> <!-- 1stBatch -->
      <group name="Rebate">
        <method signature="QCStore.QC_Refinance_StepDownURP_Txn()[pri:201, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepDownURP_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Refinance_StepDownVoidURP_Txn()[pri:202, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepDownVoidURP_Txn" class="tests.QCStore"/>
      </group> <!-- Rebate -->
    </groups>
    <test name="Test" duration-ms="22403847" started-at="2019-04-01T12:56:16Z" finished-at="2019-04-01T19:09:40Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="132" started-at="2019-04-01T12:56:16Z" finished-at="2019-04-01T12:56:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5011" started-at="2019-04-01T12:56:17Z" finished-at="2019-04-01T12:56:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_Promotion_Txn()[pri:100, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" duration-ms="372164" started-at="2019-04-01T12:56:22Z" finished-at="2019-04-01T13:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Promotion_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="226" started-at="2019-04-01T13:02:34Z" finished-at="2019-04-01T13:02:34Z">
>>>>>>> brahmith1.1
=======
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="1506" started-at="2019-04-02T06:55:58Z" finished-at="2019-04-02T06:56:00Z">
>>>>>>> anoop1.1
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RefinanceStepup status=FAILURE method=QCStore.RefinanceStepup()[pri:9, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5011" started-at="2019-04-01T13:02:34Z" finished-at="2019-04-01T13:02:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_RefinanceStepDown_Txn()[pri:102, instance:tests.QCStore@5f9d02cb]" name="QC_RefinanceStepDown_Txn" duration-ms="1128875" started-at="2019-04-01T13:02:39Z" finished-at="2019-04-01T13:21:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_RefinanceStepDown_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="76" started-at="2019-04-01T13:21:28Z" finished-at="2019-04-01T13:21:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_RefinanceStepDown_Txn status=SUCCESS method=QCStore.QC_RefinanceStepDown_Txn()[pri:102, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5017" started-at="2019-04-01T13:21:28Z" finished-at="2019-04-01T13:21:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_RefinanceStepDown_Void_Txn()[pri:103, instance:tests.QCStore@5f9d02cb]" name="QC_RefinanceStepDown_Void_Txn" duration-ms="1383836" started-at="2019-04-01T13:21:33Z" finished-at="2019-04-01T13:44:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_RefinanceStepDown_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="54" started-at="2019-04-01T13:44:37Z" finished-at="2019-04-01T13:44:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_RefinanceStepDown_Void_Txn status=SUCCESS method=QCStore.QC_RefinanceStepDown_Void_Txn()[pri:103, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5009" started-at="2019-04-01T13:44:37Z" finished-at="2019-04-01T13:44:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_OpenLoan_NewLoan_Txn()[pri:108, instance:tests.QCStore@5f9d02cb]" name="QC_OpenLoan_NewLoan_Txn" duration-ms="439304" started-at="2019-04-01T13:44:42Z" finished-at="2019-04-01T13:52:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_OpenLoan_NewLoan_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="40" started-at="2019-04-01T13:52:01Z" finished-at="2019-04-01T13:52:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_OpenLoan_NewLoan_Txn status=SUCCESS method=QCStore.QC_OpenLoan_NewLoan_Txn()[pri:108, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5022" started-at="2019-04-01T13:52:01Z" finished-at="2019-04-01T13:52:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_Void_Txn()[pri:109, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" duration-ms="321268" started-at="2019-04-01T13:52:06Z" finished-at="2019-04-01T13:57:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="34" started-at="2019-04-01T13:57:27Z" finished-at="2019-04-01T13:57:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_Void_Txn status=SUCCESS method=QCStore.QC_NewLoan_Void_Txn()[pri:109, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5017" started-at="2019-04-01T13:57:28Z" finished-at="2019-04-01T13:57:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_AgeStore_Void_Txn()[pri:110, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" duration-ms="501200" started-at="2019-04-01T13:57:33Z" finished-at="2019-04-01T14:05:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_AgeStore_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="52" started-at="2019-04-01T14:05:54Z" finished-at="2019-04-01T14:05:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_AgeStore_Void_Txn status=SUCCESS method=QCStore.QC_AgeStore_Void_Txn()[pri:110, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5018" started-at="2019-04-01T14:05:54Z" finished-at="2019-04-01T14:05:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Deposit_Menu_Txn()[pri:111, instance:tests.QCStore@5f9d02cb]" name="QC_Deposit_Menu_Txn" duration-ms="734647" started-at="2019-04-01T14:05:59Z" finished-at="2019-04-01T14:18:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Deposit_Menu_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="56" started-at="2019-04-01T14:18:13Z" finished-at="2019-04-01T14:18:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Deposit_Menu_Txn status=SUCCESS method=QCStore.QC_Deposit_Menu_Txn()[pri:111, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5010" started-at="2019-04-01T14:18:14Z" finished-at="2019-04-01T14:18:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Deposit_GraceDays_Txn()[pri:112, instance:tests.QCStore@5f9d02cb]" name="QC_Deposit_GraceDays_Txn" duration-ms="829376" started-at="2019-04-01T14:18:19Z" finished-at="2019-04-01T14:32:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Deposit_GraceDays_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="31" started-at="2019-04-01T14:32:08Z" finished-at="2019-04-01T14:32:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Deposit_GraceDays_Txn status=SUCCESS method=QCStore.QC_Deposit_GraceDays_Txn()[pri:112, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5014" started-at="2019-04-01T14:32:08Z" finished-at="2019-04-01T14:32:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_FutureDeposit_DropDown()[pri:113, instance:tests.QCStore@5f9d02cb]" name="QC_FutureDeposit_DropDown" duration-ms="1047730" started-at="2019-04-01T14:32:13Z" finished-at="2019-04-01T14:49:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_FutureDeposit_DropDown -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="44" started-at="2019-04-01T14:49:41Z" finished-at="2019-04-01T14:49:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_FutureDeposit_DropDown status=SUCCESS method=QCStore.QC_FutureDeposit_DropDown()[pri:113, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5016" started-at="2019-04-01T14:49:41Z" finished-at="2019-04-01T14:49:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_Deposit_Void_Txn()[pri:157, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Deposit_Void_Txn" duration-ms="1226685" started-at="2019-04-01T14:49:46Z" finished-at="2019-04-01T15:10:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_Deposit_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="35" started-at="2019-04-01T15:10:12Z" finished-at="2019-04-01T15:10:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_Deposit_Void_Txn status=SUCCESS method=QCStore.QC_Epp_Deposit_Void_Txn()[pri:157, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5013" started-at="2019-04-01T15:10:12Z" finished-at="2019-04-01T15:10:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_PrePayment_Txn()[pri:158, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_PrePayment_Txn" duration-ms="1345298" started-at="2019-04-01T15:10:17Z" finished-at="2019-04-01T15:32:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_PrePayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="36" started-at="2019-04-01T15:32:43Z" finished-at="2019-04-01T15:32:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_PrePayment_Txn status=SUCCESS method=QCStore.QC_Epp_PrePayment_Txn()[pri:158, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5025" started-at="2019-04-01T15:32:43Z" finished-at="2019-04-01T15:32:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_Check_Deposit_Clear_Txn()[pri:159, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Check_Deposit_Clear_Txn" duration-ms="1547205" started-at="2019-04-01T15:32:48Z" finished-at="2019-04-01T15:58:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_Check_Deposit_Clear_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="35" started-at="2019-04-01T15:58:35Z" finished-at="2019-04-01T15:58:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_Check_Deposit_Clear_Txn status=SUCCESS method=QCStore.QC_Epp_Check_Deposit_Clear_Txn()[pri:159, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5024" started-at="2019-04-01T15:58:35Z" finished-at="2019-04-01T15:58:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_EppDepositClear_Refund_Txn()[pri:160, instance:tests.QCStore@5f9d02cb]" name="QC_EppDepositClear_Refund_Txn" duration-ms="1504720" started-at="2019-04-01T15:58:40Z" finished-at="2019-04-01T16:23:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_EppDepositClear_Refund_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="53" started-at="2019-04-01T16:23:45Z" finished-at="2019-04-01T16:23:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_EppDepositClear_Refund_Txn status=SUCCESS method=QCStore.QC_EppDepositClear_Refund_Txn()[pri:160, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5013" started-at="2019-04-01T16:23:45Z" finished-at="2019-04-01T16:23:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_PrePayment_Return_Txn()[pri:161, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_PrePayment_Return_Txn" duration-ms="1345980" started-at="2019-04-01T16:23:50Z" finished-at="2019-04-01T16:46:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_PrePayment_Return_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="62" started-at="2019-04-01T16:46:16Z" finished-at="2019-04-01T16:46:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_PrePayment_Return_Txn status=SUCCESS method=QCStore.QC_Epp_PrePayment_Return_Txn()[pri:161, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5023" started-at="2019-04-01T16:46:16Z" finished-at="2019-04-01T16:46:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_Return_NSFPayment_Txn()[pri:162, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Return_NSFPayment_Txn" duration-ms="1426964" started-at="2019-04-01T16:46:21Z" finished-at="2019-04-01T17:10:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_Return_NSFPayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="51" started-at="2019-04-01T17:10:08Z" finished-at="2019-04-01T17:10:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_Return_NSFPayment_Txn status=SUCCESS method=QCStore.QC_Epp_Return_NSFPayment_Txn()[pri:162, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5020" started-at="2019-04-01T17:10:08Z" finished-at="2019-04-01T17:10:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Epp_Return_ReDeposit_Txn()[pri:163, instance:tests.QCStore@5f9d02cb]" name="QC_Epp_Return_ReDeposit_Txn" duration-ms="1407996" started-at="2019-04-01T17:10:13Z" finished-at="2019-04-01T17:33:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Epp_Return_ReDeposit_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="60" started-at="2019-04-01T17:33:41Z" finished-at="2019-04-01T17:33:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Epp_Return_ReDeposit_Txn status=SUCCESS method=QCStore.QC_Epp_Return_ReDeposit_Txn()[pri:163, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5009" started-at="2019-04-01T17:33:41Z" finished-at="2019-04-01T17:33:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Void_FullReturnPayment_Txn()[pri:169, instance:tests.QCStore@5f9d02cb]" name="QC_Void_FullReturnPayment_Txn" duration-ms="1384598" started-at="2019-04-01T17:33:46Z" finished-at="2019-04-01T17:56:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Void_FullReturnPayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="61" started-at="2019-04-01T17:56:51Z" finished-at="2019-04-01T17:56:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Void_FullReturnPayment_Txn status=SUCCESS method=QCStore.QC_Void_FullReturnPayment_Txn()[pri:169, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5021" started-at="2019-04-01T17:56:51Z" finished-at="2019-04-01T17:56:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_PartialPayment_RefundVoid_Txn()[pri:170, instance:tests.QCStore@5f9d02cb]" name="QC_PartialPayment_RefundVoid_Txn" duration-ms="1102402" started-at="2019-04-01T17:56:56Z" finished-at="2019-04-01T18:15:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_PartialPayment_RefundVoid_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="50" started-at="2019-04-01T18:15:18Z" finished-at="2019-04-01T18:15:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_PartialPayment_RefundVoid_Txn status=SUCCESS method=QCStore.QC_PartialPayment_RefundVoid_Txn()[pri:170, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5014" started-at="2019-04-01T18:15:18Z" finished-at="2019-04-01T18:15:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_Refinance_StepSameURP_Txn()[pri:198, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepSameURP_Txn" duration-ms="846547" started-at="2019-04-01T18:15:23Z" finished-at="2019-04-01T18:29:30Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.QCRefinance.refinanceStepSame(QCRefinance.java:730)
at tests.QCStore.QC_Refinance_StepSameURP_Txn(QCStore.java:1457)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Refinance_StepSameURP_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="631" started-at="2019-04-01T18:29:30Z" finished-at="2019-04-01T18:29:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Refinance_StepSameURP_Txn status=FAILURE method=QCStore.QC_Refinance_StepSameURP_Txn()[pri:198, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5011" started-at="2019-04-01T18:29:30Z" finished-at="2019-04-01T18:29:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_Refinance_StepSameVoidURP_Txn()[pri:199, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepSameVoidURP_Txn" duration-ms="730298" started-at="2019-04-01T18:29:35Z" finished-at="2019-04-01T18:41:46Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.QCRefinance.refinanceStepSame(QCRefinance.java:730)
at tests.QCStore.QC_Refinance_StepSameVoidURP_Txn(QCStore.java:1516)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Refinance_StepSameVoidURP_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="716" started-at="2019-04-01T18:41:46Z" finished-at="2019-04-01T18:41:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Refinance_StepSameVoidURP_Txn status=FAILURE method=QCStore.QC_Refinance_StepSameVoidURP_Txn()[pri:199, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5020" started-at="2019-04-01T18:41:46Z" finished-at="2019-04-01T18:41:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_Refinance_StepDownURP_Txn()[pri:201, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepDownURP_Txn" duration-ms="899535" started-at="2019-04-01T18:41:51Z" finished-at="2019-04-01T18:56:51Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.QCRefinance.refinanceStepDown(QCRefinance.java:359)
at tests.QCStore.QC_Refinance_StepDownURP_Txn(QCStore.java:1331)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Refinance_StepDownURP_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="725" started-at="2019-04-01T18:56:51Z" finished-at="2019-04-01T18:56:52Z">
=======
<testng-results skipped="0" failed="0" ignored="55" total="77" passed="22">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="17519631" started-at="2019-03-29T13:31:22Z" finished-at="2019-03-29T18:23:22Z">
    <groups>
      <group name="Janaki">
        <method signature="QCStore.JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn()[pri:409, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_AutoClear_Txn()[pri:405, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_AutoClear_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_ClearDropdown_Txn()[pri:403, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_ClearDropdown_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_ClearMenu_Txn()[pri:404, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_ClearMenu_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_PrePayment_Txn()[pri:0, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_PrePayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_PrePayment_Void_Txn()[pri:402, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_PrePayment_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_Return_Refinance_Txn()[pri:410, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_Return_Refinance_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Deposit_Return_Refinance_Void_Txn()[pri:411, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_Return_Refinance_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn()[pri:408, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_PrePayment_Clear_Txn()[pri:407, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_PrePayment_Clear_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_PrePayment_Return_Txn()[pri:406, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_PrePayment_Return_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn()[pri:413, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_AgeStore_Refinance_Rescind_Txn()[pri:412, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Refinance_Rescind_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_BuyBack_Rebate_Txn_Testdata()[pri:418, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Rebate_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_BuyBack_Rebate_Void_Txn_Testdata()[pri:419, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Rebate_Void_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_BuyBack_Txn_Testdata()[pri:416, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_BuyBack_Void_Txn_Testdata()[pri:417, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Void_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata()[pri:420, instance:tests.QCStore@5f9d02cb]" name="JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_Deposit_Return_EPP_Txn_Testdata()[pri:421, instance:tests.QCStore@5f9d02cb]" name="JQC_Deposit_Return_EPP_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata()[pri:422, instance:tests.QCStore@5f9d02cb]" name="JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_EPP_Txn_Testdata()[pri:425, instance:tests.QCStore@5f9d02cb]" name="JQC_EPP_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_Return_ReDeposit_Clear_Txn()[pri:414, instance:tests.QCStore@5f9d02cb]" name="JQC_Return_ReDeposit_Clear_Txn" class="tests.QCStore"/>
      </group> <!-- Janaki -->
    </groups>
    <test name="Test" duration-ms="17519631" started-at="2019-03-29T13:31:22Z" finished-at="2019-03-29T18:23:22Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="83" started-at="2019-03-29T13:31:22Z" finished-at="2019-03-29T13:31:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T13:31:23Z" finished-at="2019-03-29T13:31:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_PrePayment_Txn()[pri:0, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_PrePayment_Txn" duration-ms="716135" started-at="2019-03-29T13:31:28Z" finished-at="2019-03-29T13:43:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_PrePayment_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="218" started-at="2019-03-29T13:43:24Z" finished-at="2019-03-29T13:43:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_PrePayment_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_PrePayment_Txn()[pri:0, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T13:43:24Z" finished-at="2019-03-29T13:43:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_PrePayment_Void_Txn()[pri:402, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_PrePayment_Void_Txn" duration-ms="749773" started-at="2019-03-29T13:43:29Z" finished-at="2019-03-29T13:55:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_PrePayment_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="84" started-at="2019-03-29T13:55:59Z" finished-at="2019-03-29T13:55:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_PrePayment_Void_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_PrePayment_Void_Txn()[pri:402, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T13:55:59Z" finished-at="2019-03-29T13:56:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_ClearDropdown_Txn()[pri:403, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_ClearDropdown_Txn" duration-ms="599647" started-at="2019-03-29T13:56:04Z" finished-at="2019-03-29T14:06:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_ClearDropdown_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="31" started-at="2019-03-29T14:06:03Z" finished-at="2019-03-29T14:06:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_ClearDropdown_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_ClearDropdown_Txn()[pri:403, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T14:06:03Z" finished-at="2019-03-29T14:06:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_ClearMenu_Txn()[pri:404, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_ClearMenu_Txn" duration-ms="717316" started-at="2019-03-29T14:06:08Z" finished-at="2019-03-29T14:18:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_ClearMenu_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="39" started-at="2019-03-29T14:18:06Z" finished-at="2019-03-29T14:18:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_ClearMenu_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_ClearMenu_Txn()[pri:404, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T14:18:06Z" finished-at="2019-03-29T14:18:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_AutoClear_Txn()[pri:405, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_AutoClear_Txn" duration-ms="800107" started-at="2019-03-29T14:18:11Z" finished-at="2019-03-29T14:31:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_AutoClear_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="67" started-at="2019-03-29T14:31:31Z" finished-at="2019-03-29T14:31:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_AutoClear_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_AutoClear_Txn()[pri:405, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T14:31:31Z" finished-at="2019-03-29T14:31:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_PrePayment_Return_Txn()[pri:406, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_PrePayment_Return_Txn" duration-ms="806126" started-at="2019-03-29T14:31:36Z" finished-at="2019-03-29T14:45:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_PrePayment_Return_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="51" started-at="2019-03-29T14:45:02Z" finished-at="2019-03-29T14:45:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_PrePayment_Return_Txn status=SUCCESS method=QCStore.JQC_AgeStore_PrePayment_Return_Txn()[pri:406, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T14:45:02Z" finished-at="2019-03-29T14:45:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_PrePayment_Clear_Txn()[pri:407, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_PrePayment_Clear_Txn" duration-ms="859785" started-at="2019-03-29T14:45:07Z" finished-at="2019-03-29T14:59:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_PrePayment_Clear_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="53" started-at="2019-03-29T14:59:27Z" finished-at="2019-03-29T14:59:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_PrePayment_Clear_Txn status=SUCCESS method=QCStore.JQC_AgeStore_PrePayment_Clear_Txn()[pri:407, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-03-29T14:59:27Z" finished-at="2019-03-29T14:59:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn()[pri:408, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn" duration-ms="747548" started-at="2019-03-29T14:59:32Z" finished-at="2019-03-29T15:12:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="53" started-at="2019-03-29T15:12:00Z" finished-at="2019-03-29T15:12:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn status=SUCCESS method=QCStore.JQC_AgeStore_NSFPosting_Refinance_Rescind_Txn()[pri:408, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T15:12:00Z" finished-at="2019-03-29T15:12:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn()[pri:409, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn" duration-ms="825599" started-at="2019-03-29T15:12:05Z" finished-at="2019-03-29T15:25:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="36" started-at="2019-03-29T15:25:50Z" finished-at="2019-03-29T15:25:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn status=SUCCESS method=QCStore.JQC_AgeStore_ACHReturn_Refinance_Rescind_Txn()[pri:409, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T15:25:50Z" finished-at="2019-03-29T15:25:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_Return_Refinance_Txn()[pri:410, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_Return_Refinance_Txn" duration-ms="744173" started-at="2019-03-29T15:25:55Z" finished-at="2019-03-29T15:38:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_Return_Refinance_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="50" started-at="2019-03-29T15:38:19Z" finished-at="2019-03-29T15:38:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Deposit_Return_Refinance_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Deposit_Return_Refinance_Txn()[pri:410, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T15:38:19Z" finished-at="2019-03-29T15:38:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Deposit_Return_Refinance_Void_Txn()[pri:411, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Deposit_Return_Refinance_Void_Txn" duration-ms="771580" started-at="2019-03-29T15:38:24Z" finished-at="2019-03-29T15:51:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Deposit_Return_Refinance_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="47" started-at="2019-03-29T15:51:16Z" finished-at="2019-03-29T15:51:16Z">
>>>>>>> janaki1.2
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Refinance_StepDownURP_Txn status=FAILURE method=QCStore.QC_Refinance_StepDownURP_Txn()[pri:201, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
<<<<<<< HEAD
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5010" started-at="2019-04-01T18:56:52Z" finished-at="2019-04-01T18:56:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Refinance_StepDownVoidURP_Txn()[pri:202, instance:tests.QCStore@5f9d02cb]" name="QC_Refinance_StepDownVoidURP_Txn" duration-ms="763496" started-at="2019-04-01T18:56:57Z" finished-at="2019-04-01T19:09:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Refinance_StepDownVoidURP_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="73" started-at="2019-04-01T19:09:40Z" finished-at="2019-04-01T19:09:40Z">
=======
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T15:51:16Z" finished-at="2019-03-29T15:51:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Refinance_Rescind_Txn()[pri:412, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Refinance_Rescind_Txn" duration-ms="698793" started-at="2019-03-29T15:51:21Z" finished-at="2019-03-29T16:03:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Refinance_Rescind_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="53" started-at="2019-03-29T16:03:00Z" finished-at="2019-03-29T16:03:00Z">
>>>>>>> janaki1.2
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Refinance_StepDownVoidURP_Txn status=SUCCESS method=QCStore.QC_Refinance_StepDownVoidURP_Txn()[pri:202, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T16:03:00Z" finished-at="2019-03-29T16:03:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn()[pri:413, instance:tests.QCStore@5f9d02cb]" name="JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn" duration-ms="925045" started-at="2019-03-29T16:03:05Z" finished-at="2019-03-29T16:18:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="45" started-at="2019-03-29T16:18:30Z" finished-at="2019-03-29T16:18:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn status=SUCCESS method=QCStore.JQC_AgeStore_Redeposit_Prepayment_Void_Prepayment_Return_Txn()[pri:413, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T16:18:30Z" finished-at="2019-03-29T16:18:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_Return_ReDeposit_Clear_Txn()[pri:414, instance:tests.QCStore@5f9d02cb]" name="JQC_Return_ReDeposit_Clear_Txn" duration-ms="907402" started-at="2019-03-29T16:18:35Z" finished-at="2019-03-29T16:33:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_Return_ReDeposit_Clear_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="62" started-at="2019-03-29T16:33:42Z" finished-at="2019-03-29T16:33:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_Return_ReDeposit_Clear_Txn status=SUCCESS method=QCStore.JQC_Return_ReDeposit_Clear_Txn()[pri:414, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-03-29T16:33:43Z" finished-at="2019-03-29T16:33:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_BuyBack_Txn_Testdata()[pri:416, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Txn_Testdata" duration-ms="574135" started-at="2019-03-29T16:33:48Z" finished-at="2019-03-29T16:43:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_BuyBack_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="63" started-at="2019-03-29T16:43:22Z" finished-at="2019-03-29T16:43:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_BuyBack_Txn_Testdata status=SUCCESS method=QCStore.JQC_BuyBack_Txn_Testdata()[pri:416, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T16:43:22Z" finished-at="2019-03-29T16:43:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_BuyBack_Void_Txn_Testdata()[pri:417, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Void_Txn_Testdata" duration-ms="692520" started-at="2019-03-29T16:43:27Z" finished-at="2019-03-29T16:54:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_BuyBack_Void_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="78" started-at="2019-03-29T16:54:59Z" finished-at="2019-03-29T16:54:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_BuyBack_Void_Txn_Testdata status=SUCCESS method=QCStore.JQC_BuyBack_Void_Txn_Testdata()[pri:417, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-03-29T16:54:59Z" finished-at="2019-03-29T16:55:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_BuyBack_Rebate_Txn_Testdata()[pri:418, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Rebate_Txn_Testdata" duration-ms="390174" started-at="2019-03-29T16:55:04Z" finished-at="2019-03-29T17:01:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_BuyBack_Rebate_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="75" started-at="2019-03-29T17:01:34Z" finished-at="2019-03-29T17:01:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_BuyBack_Rebate_Txn_Testdata status=SUCCESS method=QCStore.JQC_BuyBack_Rebate_Txn_Testdata()[pri:418, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-03-29T17:01:35Z" finished-at="2019-03-29T17:01:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_BuyBack_Rebate_Void_Txn_Testdata()[pri:419, instance:tests.QCStore@5f9d02cb]" name="JQC_BuyBack_Rebate_Void_Txn_Testdata" duration-ms="435306" started-at="2019-03-29T17:01:40Z" finished-at="2019-03-29T17:08:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_BuyBack_Rebate_Void_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="68" started-at="2019-03-29T17:08:55Z" finished-at="2019-03-29T17:08:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_BuyBack_Rebate_Void_Txn_Testdata status=SUCCESS method=QCStore.JQC_BuyBack_Rebate_Void_Txn_Testdata()[pri:419, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5001" started-at="2019-03-29T17:08:55Z" finished-at="2019-03-29T17:09:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata()[pri:420, instance:tests.QCStore@5f9d02cb]" name="JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata" duration-ms="901942" started-at="2019-03-29T17:09:00Z" finished-at="2019-03-29T17:24:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="89" started-at="2019-03-29T17:24:02Z" finished-at="2019-03-29T17:24:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata status=SUCCESS method=QCStore.JQC_ChkDeposit_RtnChk_ReDeposit_Payment_Void_Clear_Txn_Testdata()[pri:420, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T17:24:02Z" finished-at="2019-03-29T17:24:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_Deposit_Return_EPP_Txn_Testdata()[pri:421, instance:tests.QCStore@5f9d02cb]" name="JQC_Deposit_Return_EPP_Txn_Testdata" duration-ms="999729" started-at="2019-03-29T17:24:07Z" finished-at="2019-03-29T17:40:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_Deposit_Return_EPP_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="65" started-at="2019-03-29T17:40:47Z" finished-at="2019-03-29T17:40:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_Deposit_Return_EPP_Txn_Testdata status=SUCCESS method=QCStore.JQC_Deposit_Return_EPP_Txn_Testdata()[pri:421, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T17:40:47Z" finished-at="2019-03-29T17:40:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata()[pri:422, instance:tests.QCStore@5f9d02cb]" name="JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata" duration-ms="1937477" started-at="2019-03-29T17:40:52Z" finished-at="2019-03-29T18:13:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="67" started-at="2019-03-29T18:13:09Z" finished-at="2019-03-29T18:13:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata status=SUCCESS method=QCStore.JQC_EPP_AgestoreInstallmentwise_EPPPayment_Txn_Testdata()[pri:422, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-03-29T18:13:09Z" finished-at="2019-03-29T18:13:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_EPP_Txn_Testdata()[pri:425, instance:tests.QCStore@5f9d02cb]" name="JQC_EPP_Txn_Testdata" duration-ms="607726" started-at="2019-03-29T18:13:14Z" finished-at="2019-03-29T18:23:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_EPP_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="66" started-at="2019-03-29T18:23:22Z" finished-at="2019-03-29T18:23:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_EPP_Txn_Testdata status=SUCCESS method=QCStore.JQC_EPP_Txn_Testdata()[pri:425, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- tests.QCStore -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
