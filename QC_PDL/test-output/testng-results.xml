<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="54" total="65" passed="11">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="5266166" started-at="2019-04-05T07:16:48Z" finished-at="2019-04-05T08:44:35Z">
    <groups>
      <group name="Anoop">
        <method signature="QCStore.AQC_EPPDeposit()[pri:16, instance:tests.QCStore@5f9d02cb]" name="AQC_EPPDeposit" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_Prepayment()[pri:17, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Prepayment" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_Redeposit()[pri:22, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Redeposit" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_Return()[pri:20, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Return" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_clear()[pri:18, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_clear" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_nsfPayment()[pri:21, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_nsfPayment" class="tests.QCStore"/>
        <method signature="QCStore.AQC_EPP_refund()[pri:19, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_refund" class="tests.QCStore"/>
        <method signature="QCStore.RefinanceStepSameVoid()[pri:12, instance:tests.QCStore@5f9d02cb]" name="RefinanceStepSameVoid" class="tests.QCStore"/>
        <method signature="QCStore.borrowregNewloan()[pri:13, instance:tests.QCStore@5f9d02cb]" name="borrowregNewloan" class="tests.QCStore"/>
        <method signature="QCStore.rebateStepup()[pri:14, instance:tests.QCStore@5f9d02cb]" name="rebateStepup" class="tests.QCStore"/>
        <method signature="QCStore.rebateStepupVoid()[pri:15, instance:tests.QCStore@5f9d02cb]" name="rebateStepupVoid" class="tests.QCStore"/>
      </group> <!-- Anoop -->
    </groups>
    <test name="Test" duration-ms="5266166" started-at="2019-04-05T07:16:48Z" finished-at="2019-04-05T08:44:35Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="124" started-at="2019-04-05T07:16:48Z" finished-at="2019-04-05T07:16:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5016" started-at="2019-04-05T07:16:49Z" finished-at="2019-04-05T07:16:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="RefinanceStepSameVoid()[pri:12, instance:tests.QCStore@5f9d02cb]" name="RefinanceStepSameVoid" duration-ms="516591" started-at="2019-04-05T07:16:54Z" finished-at="2019-04-05T07:25:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RefinanceStepSameVoid -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="345" started-at="2019-04-05T07:25:30Z" finished-at="2019-04-05T07:25:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RefinanceStepSameVoid status=SUCCESS method=QCStore.RefinanceStepSameVoid()[pri:12, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5015" started-at="2019-04-05T07:25:30Z" finished-at="2019-04-05T07:25:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="borrowregNewloan()[pri:13, instance:tests.QCStore@5f9d02cb]" name="borrowregNewloan" duration-ms="165358" started-at="2019-04-05T07:25:35Z" finished-at="2019-04-05T07:28:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- borrowregNewloan -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="74" started-at="2019-04-05T07:28:21Z" finished-at="2019-04-05T07:28:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=borrowregNewloan status=SUCCESS method=QCStore.borrowregNewloan()[pri:13, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5023" started-at="2019-04-05T07:28:21Z" finished-at="2019-04-05T07:28:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="rebateStepup()[pri:14, instance:tests.QCStore@5f9d02cb]" name="rebateStepup" duration-ms="380534" started-at="2019-04-05T07:28:26Z" finished-at="2019-04-05T07:34:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- rebateStepup -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="52" started-at="2019-04-05T07:34:46Z" finished-at="2019-04-05T07:34:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=rebateStepup status=SUCCESS method=QCStore.rebateStepup()[pri:14, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5039" started-at="2019-04-05T07:34:47Z" finished-at="2019-04-05T07:34:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="rebateStepupVoid()[pri:15, instance:tests.QCStore@5f9d02cb]" name="rebateStepupVoid" duration-ms="465366" started-at="2019-04-05T07:34:52Z" finished-at="2019-04-05T07:42:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- rebateStepupVoid -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="52" started-at="2019-04-05T07:42:37Z" finished-at="2019-04-05T07:42:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=rebateStepupVoid status=SUCCESS method=QCStore.rebateStepupVoid()[pri:15, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5027" started-at="2019-04-05T07:42:37Z" finished-at="2019-04-05T07:42:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPPDeposit()[pri:16, instance:tests.QCStore@5f9d02cb]" name="AQC_EPPDeposit" duration-ms="418322" started-at="2019-04-05T07:42:42Z" finished-at="2019-04-05T07:49:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPPDeposit -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="51" started-at="2019-04-05T07:49:40Z" finished-at="2019-04-05T07:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPPDeposit status=SUCCESS method=QCStore.AQC_EPPDeposit()[pri:16, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5023" started-at="2019-04-05T07:49:40Z" finished-at="2019-04-05T07:49:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_Prepayment()[pri:17, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Prepayment" duration-ms="444325" started-at="2019-04-05T07:49:45Z" finished-at="2019-04-05T07:57:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_Prepayment -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="52" started-at="2019-04-05T07:57:10Z" finished-at="2019-04-05T07:57:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_Prepayment status=SUCCESS method=QCStore.AQC_EPP_Prepayment()[pri:17, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5021" started-at="2019-04-05T07:57:10Z" finished-at="2019-04-05T07:57:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_clear()[pri:18, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_clear" duration-ms="452047" started-at="2019-04-05T07:57:15Z" finished-at="2019-04-05T08:04:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_clear -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="45" started-at="2019-04-05T08:04:47Z" finished-at="2019-04-05T08:04:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_clear status=SUCCESS method=QCStore.AQC_EPP_clear()[pri:18, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5012" started-at="2019-04-05T08:04:47Z" finished-at="2019-04-05T08:04:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_refund()[pri:19, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_refund" duration-ms="617898" started-at="2019-04-05T08:04:52Z" finished-at="2019-04-05T08:15:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_refund -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="59" started-at="2019-04-05T08:15:10Z" finished-at="2019-04-05T08:15:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_refund status=SUCCESS method=QCStore.AQC_EPP_refund()[pri:19, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5041" started-at="2019-04-05T08:15:10Z" finished-at="2019-04-05T08:15:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_Return()[pri:20, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Return" duration-ms="614678" started-at="2019-04-05T08:15:15Z" finished-at="2019-04-05T08:25:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_Return -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="60" started-at="2019-04-05T08:25:30Z" finished-at="2019-04-05T08:25:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_Return status=SUCCESS method=QCStore.AQC_EPP_Return()[pri:20, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5026" started-at="2019-04-05T08:25:30Z" finished-at="2019-04-05T08:25:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_nsfPayment()[pri:21, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_nsfPayment" duration-ms="552374" started-at="2019-04-05T08:25:35Z" finished-at="2019-04-05T08:34:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_nsfPayment -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="45" started-at="2019-04-05T08:34:47Z" finished-at="2019-04-05T08:34:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_nsfPayment status=SUCCESS method=QCStore.AQC_EPP_nsfPayment()[pri:21, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5013" started-at="2019-04-05T08:34:47Z" finished-at="2019-04-05T08:34:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="AQC_EPP_Redeposit()[pri:22, instance:tests.QCStore@5f9d02cb]" name="AQC_EPP_Redeposit" duration-ms="582348" started-at="2019-04-05T08:34:52Z" finished-at="2019-04-05T08:44:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AQC_EPP_Redeposit -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="64" started-at="2019-04-05T08:44:34Z" finished-at="2019-04-05T08:44:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AQC_EPP_Redeposit status=SUCCESS method=QCStore.AQC_EPP_Redeposit()[pri:22, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- tests.QCStore -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
