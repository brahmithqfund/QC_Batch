<?xml version="1.0" encoding="UTF-8"?>
<<<<<<< HEAD
<testng-results skipped="0" failed="0" ignored="26" total="30" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="1786473" started-at="2019-05-08T09:38:43Z" finished-at="2019-05-08T10:08:29Z">
    <groups>
      <group name="Janaki">
        <method signature="QCStore.JQC_DefaultPayment_Txn_Testdata()[pri:207, instance:tests.QCStore@5f9d02cb]" name="JQC_DefaultPayment_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_DefaultPayment_Void_Txn_Testdata()[pri:208, instance:tests.QCStore@5f9d02cb]" name="JQC_DefaultPayment_Void_Txn_Testdata" class="tests.QCStore"/>
        <method signature="QCStore.JQC_TLP_Deceased_Txn()[pri:206, instance:tests.QCStore@5f9d02cb]" name="JQC_TLP_Deceased_Txn" class="tests.QCStore"/>
        <method signature="QCStore.JQC_TLP_GraceDays_Deposit_dropdown_Txn()[pri:205, instance:tests.QCStore@5f9d02cb]" name="JQC_TLP_GraceDays_Deposit_dropdown_Txn" class="tests.QCStore"/>
      </group> <!-- Janaki -->
    </groups>
    <test name="Test" duration-ms="1786473" started-at="2019-05-08T09:38:43Z" finished-at="2019-05-08T10:08:29Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="81" started-at="2019-05-08T09:38:43Z" finished-at="2019-05-08T09:38:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-05-08T09:38:43Z" finished-at="2019-05-08T09:38:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_TLP_GraceDays_Deposit_dropdown_Txn()[pri:205, instance:tests.QCStore@5f9d02cb]" name="JQC_TLP_GraceDays_Deposit_dropdown_Txn" duration-ms="352173" started-at="2019-05-08T09:38:48Z" finished-at="2019-05-08T09:44:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_TLP_GraceDays_Deposit_dropdown_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T09:44:40Z" finished-at="2019-05-08T09:44:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="188" started-at="2019-05-08T09:44:40Z" finished-at="2019-05-08T09:44:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_TLP_GraceDays_Deposit_dropdown_Txn status=SUCCESS method=QCStore.JQC_TLP_GraceDays_Deposit_dropdown_Txn()[pri:205, instance:tests.QCStore@5f9d02cb] output={null}]]]>
=======
<testng-results skipped="0" failed="2" ignored="23" total="35" passed="10">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="4585149" started-at="2019-05-08T10:14:54Z" finished-at="2019-05-08T11:31:19Z">
    <groups>
      <group name="Brahmith">
        <method signature="QCStore.QC_AgeStore_Void_Txn()[pri:105, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Installmentpayment_Txn()[pri:118, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_Installmentpayment_Void_Txn()[pri:119, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Promotion_Txn()[pri:103, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_NewLoan_Void_Txn()[pri:104, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_PayAnyotherAmount_Txn()[pri:120, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_PayAnyotherAmount_Void_Txn()[pri:121, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_TLP_Buyback_Txn()[pri:116, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Buyback_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_TLP_Buyback_Void_Txn()[pri:117, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Buyback_Void_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_TLP_NewLoan_Txn()[pri:101, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_NewLoan_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_TLP_Writeoff_Recovery_Txn()[pri:131, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Writeoff_Recovery_Txn" class="tests.QCStore"/>
        <method signature="QCStore.QC_TLP_Writeoff_Recovery_Void_Txn()[pri:132, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Writeoff_Recovery_Void_Txn" class="tests.QCStore"/>
      </group> <!-- Brahmith -->
    </groups>
    <test name="Test" duration-ms="4585149" started-at="2019-05-08T10:14:54Z" finished-at="2019-05-08T11:31:19Z">
      <class name="tests.QCStore">
        <test-method status="PASS" signature="setup()[pri:0, instance:tests.QCStore@5f9d02cb]" name="setup" is-config="true" duration-ms="106" started-at="2019-05-08T10:14:54Z" finished-at="2019-05-08T10:14:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5017" started-at="2019-05-08T10:14:54Z" finished-at="2019-05-08T10:14:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_TLP_NewLoan_Txn()[pri:101, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_NewLoan_Txn" duration-ms="177424" started-at="2019-05-08T10:14:59Z" finished-at="2019-05-08T10:17:56Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.QCCSRNewLoan.newLoan(QCCSRNewLoan.java:270)
at tests.QCStore.QC_TLP_NewLoan_Txn(QCStore.java:138)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_TLP_NewLoan_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="1" started-at="2019-05-08T10:17:56Z" finished-at="2019-05-08T10:17:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="986" started-at="2019-05-08T10:17:56Z" finished-at="2019-05-08T10:17:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_TLP_NewLoan_Txn status=FAILURE method=QCStore.QC_TLP_NewLoan_Txn()[pri:101, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5013" started-at="2019-05-08T10:17:57Z" finished-at="2019-05-08T10:18:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_NewLoan_Promotion_Txn()[pri:103, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Promotion_Txn" duration-ms="455078" started-at="2019-05-08T10:18:02Z" finished-at="2019-05-08T10:25:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Promotion_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:25:37Z" finished-at="2019-05-08T10:25:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="78" started-at="2019-05-08T10:25:37Z" finished-at="2019-05-08T10:25:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_Promotion_Txn status=SUCCESS method=QCStore.QC_NewLoan_Promotion_Txn()[pri:103, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5039" started-at="2019-05-08T10:25:37Z" finished-at="2019-05-08T10:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="FAIL" signature="QC_NewLoan_Void_Txn()[pri:104, instance:tests.QCStore@5f9d02cb]" name="QC_NewLoan_Void_Txn" duration-ms="126240" started-at="2019-05-08T10:25:42Z" finished-at="2019-05-08T10:27:49Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at tests.QCCSRNewLoan.newLoan(QCCSRNewLoan.java:270)
at tests.QCStore.QC_NewLoan_Void_Txn(QCStore.java:242)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_NewLoan_Void_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:27:49Z" finished-at="2019-05-08T10:27:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="826" started-at="2019-05-08T10:27:49Z" finished-at="2019-05-08T10:27:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_NewLoan_Void_Txn status=FAILURE method=QCStore.QC_NewLoan_Void_Txn()[pri:104, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5011" started-at="2019-05-08T10:27:50Z" finished-at="2019-05-08T10:27:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_AgeStore_Void_Txn()[pri:105, instance:tests.QCStore@5f9d02cb]" name="QC_AgeStore_Void_Txn" duration-ms="578330" started-at="2019-05-08T10:27:55Z" finished-at="2019-05-08T10:37:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_AgeStore_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="33" started-at="2019-05-08T10:37:33Z" finished-at="2019-05-08T10:37:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_AgeStore_Void_Txn status=SUCCESS method=QCStore.QC_AgeStore_Void_Txn()[pri:105, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:37:33Z" finished-at="2019-05-08T10:37:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5030" started-at="2019-05-08T10:37:33Z" finished-at="2019-05-08T10:37:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_TLP_Buyback_Txn()[pri:116, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Buyback_Txn" duration-ms="311853" started-at="2019-05-08T10:37:38Z" finished-at="2019-05-08T10:42:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_TLP_Buyback_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="46" started-at="2019-05-08T10:42:50Z" finished-at="2019-05-08T10:42:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_TLP_Buyback_Txn status=SUCCESS method=QCStore.QC_TLP_Buyback_Txn()[pri:116, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:42:50Z" finished-at="2019-05-08T10:42:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5019" started-at="2019-05-08T10:42:50Z" finished-at="2019-05-08T10:42:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_TLP_Buyback_Void_Txn()[pri:117, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Buyback_Void_Txn" duration-ms="356085" started-at="2019-05-08T10:42:55Z" finished-at="2019-05-08T10:48:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_TLP_Buyback_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="33" started-at="2019-05-08T10:48:51Z" finished-at="2019-05-08T10:48:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_TLP_Buyback_Void_Txn status=SUCCESS method=QCStore.QC_TLP_Buyback_Void_Txn()[pri:117, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:48:51Z" finished-at="2019-05-08T10:48:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5015" started-at="2019-05-08T10:48:51Z" finished-at="2019-05-08T10:48:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Installmentpayment_Txn()[pri:118, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Txn" duration-ms="304033" started-at="2019-05-08T10:48:56Z" finished-at="2019-05-08T10:54:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Installmentpayment_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:54:00Z" finished-at="2019-05-08T10:54:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="32" started-at="2019-05-08T10:54:00Z" finished-at="2019-05-08T10:54:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Installmentpayment_Txn status=SUCCESS method=QCStore.QC_Installmentpayment_Txn()[pri:118, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5033" started-at="2019-05-08T10:54:00Z" finished-at="2019-05-08T10:54:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_Installmentpayment_Void_Txn()[pri:119, instance:tests.QCStore@5f9d02cb]" name="QC_Installmentpayment_Void_Txn" duration-ms="357890" started-at="2019-05-08T10:54:05Z" finished-at="2019-05-08T11:00:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_Installmentpayment_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="35" started-at="2019-05-08T11:00:03Z" finished-at="2019-05-08T11:00:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_Installmentpayment_Void_Txn status=SUCCESS method=QCStore.QC_Installmentpayment_Void_Txn()[pri:119, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T11:00:03Z" finished-at="2019-05-08T11:00:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5016" started-at="2019-05-08T11:00:03Z" finished-at="2019-05-08T11:00:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_PayAnyotherAmount_Txn()[pri:120, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Txn" duration-ms="304619" started-at="2019-05-08T11:00:08Z" finished-at="2019-05-08T11:05:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_PayAnyotherAmount_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="37" started-at="2019-05-08T11:05:13Z" finished-at="2019-05-08T11:05:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_PayAnyotherAmount_Txn status=SUCCESS method=QCStore.QC_PayAnyotherAmount_Txn()[pri:120, instance:tests.QCStore@5f9d02cb] output={null}]]]>
>>>>>>> brahmith1.1
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
<<<<<<< HEAD
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-05-08T09:44:40Z" finished-at="2019-05-08T09:44:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_TLP_Deceased_Txn()[pri:206, instance:tests.QCStore@5f9d02cb]" name="JQC_TLP_Deceased_Txn" duration-ms="306661" started-at="2019-05-08T09:44:45Z" finished-at="2019-05-08T09:49:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_TLP_Deceased_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="51" started-at="2019-05-08T09:49:52Z" finished-at="2019-05-08T09:49:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_TLP_Deceased_Txn status=SUCCESS method=QCStore.JQC_TLP_Deceased_Txn()[pri:206, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T09:49:52Z" finished-at="2019-05-08T09:49:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-05-08T09:49:52Z" finished-at="2019-05-08T09:49:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_DefaultPayment_Txn_Testdata()[pri:207, instance:tests.QCStore@5f9d02cb]" name="JQC_DefaultPayment_Txn_Testdata" duration-ms="470509" started-at="2019-05-08T09:49:57Z" finished-at="2019-05-08T09:57:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_DefaultPayment_Txn_Testdata -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T09:57:47Z" finished-at="2019-05-08T09:57:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="96" started-at="2019-05-08T09:57:47Z" finished-at="2019-05-08T09:57:47Z">
=======
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T11:05:13Z" finished-at="2019-05-08T11:05:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5021" started-at="2019-05-08T11:05:13Z" finished-at="2019-05-08T11:05:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_PayAnyotherAmount_Void_Txn()[pri:121, instance:tests.QCStore@5f9d02cb]" name="QC_PayAnyotherAmount_Void_Txn" duration-ms="354004" started-at="2019-05-08T11:05:18Z" finished-at="2019-05-08T11:11:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_PayAnyotherAmount_Void_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T11:11:12Z" finished-at="2019-05-08T11:11:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="647" started-at="2019-05-08T11:11:12Z" finished-at="2019-05-08T11:11:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_PayAnyotherAmount_Void_Txn status=SUCCESS method=QCStore.QC_PayAnyotherAmount_Void_Txn()[pri:121, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5015" started-at="2019-05-08T11:11:12Z" finished-at="2019-05-08T11:11:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_TLP_Writeoff_Recovery_Txn()[pri:131, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Writeoff_Recovery_Txn" duration-ms="540587" started-at="2019-05-08T11:11:17Z" finished-at="2019-05-08T11:20:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_TLP_Writeoff_Recovery_Txn -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T11:20:18Z" finished-at="2019-05-08T11:20:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="39" started-at="2019-05-08T11:20:18Z" finished-at="2019-05-08T11:20:18Z">
>>>>>>> brahmith1.1
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_TLP_Writeoff_Recovery_Txn status=SUCCESS method=QCStore.QC_TLP_Writeoff_Recovery_Txn()[pri:131, instance:tests.QCStore@5f9d02cb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
<<<<<<< HEAD
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5000" started-at="2019-05-08T09:57:47Z" finished-at="2019-05-08T09:57:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="JQC_DefaultPayment_Void_Txn_Testdata()[pri:208, instance:tests.QCStore@5f9d02cb]" name="JQC_DefaultPayment_Void_Txn_Testdata" duration-ms="636617" started-at="2019-05-08T09:57:52Z" finished-at="2019-05-08T10:08:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JQC_DefaultPayment_Void_Txn_Testdata -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="73" started-at="2019-05-08T10:08:29Z" finished-at="2019-05-08T10:08:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=JQC_DefaultPayment_Void_Txn_Testdata status=SUCCESS method=QCStore.JQC_DefaultPayment_Void_Txn_Testdata()[pri:208, instance:tests.QCStore@5f9d02cb] output={null}]]]>
=======
        <test-method status="PASS" signature="killProcess()[pri:0, instance:tests.QCStore@5f9d02cb]" name="killProcess" is-config="true" duration-ms="5015" started-at="2019-05-08T11:20:18Z" finished-at="2019-05-08T11:20:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killProcess -->
        <test-method status="PASS" signature="QC_TLP_Writeoff_Recovery_Void_Txn()[pri:132, instance:tests.QCStore@5f9d02cb]" name="QC_TLP_Writeoff_Recovery_Void_Txn" duration-ms="655784" started-at="2019-05-08T11:20:23Z" finished-at="2019-05-08T11:31:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_TLP_Writeoff_Recovery_Void_Txn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:tests.QCStore@5f9d02cb]" name="getResult" is-config="true" duration-ms="46" started-at="2019-05-08T11:31:19Z" finished-at="2019-05-08T11:31:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QC_TLP_Writeoff_Recovery_Void_Txn status=SUCCESS method=QCStore.QC_TLP_Writeoff_Recovery_Void_Txn()[pri:132, instance:tests.QCStore@5f9d02cb] output={null}]]]>
>>>>>>> brahmith1.1
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
<<<<<<< HEAD
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T10:08:29Z" finished-at="2019-05-08T10:08:29Z">
=======
        <test-method status="PASS" signature="endReport()[pri:0, instance:tests.QCStore@5f9d02cb]" name="endReport" is-config="true" duration-ms="0" started-at="2019-05-08T11:31:19Z" finished-at="2019-05-08T11:31:19Z">
>>>>>>> brahmith1.1
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- tests.QCStore -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
